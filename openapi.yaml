openapi: 3.0.3
info:
  title: Babbel API
  description: |
    HTTP API for generating audio news bulletins. Combines news stories with station-specific jingles using FFmpeg.
    
    ## Authentication
    
    - **Local**: Username/password with session cookies
    - **OAuth/OIDC**: Microsoft Entra ID, Google, Okta support
    - **Headless Support**: Frontend redirect flow for separate API/UI domains
    - **Auto-provisioning**: New OAuth users get 'viewer' role automatically
    - **Account lockout protection**: Failed login attempt tracking
    
    ## Authorization
    
    Role-based access control:
    - admin: Full access including user management
    - editor: Content management (stations, voices, stories, bulletins)
    - viewer: Read-only access
    
    ## Architecture
    
    Station-voice junction table:
    - Each voice has different jingles per station
    - Mix point defines when voice starts over jingle
    - Files stored as `station_{id}_voice_{id}_jingle.wav`
    
    ## CORS
    
    Cross-Origin Resource Sharing (CORS) is configurable:
    - Set `BABBEL_ALLOWED_ORIGINS` environment variable
    - Empty/unset: API-only access (no browser access)
    - Comma-separated list: Only listed origins can access from browsers
    - Credentials (cookies) are supported when origin is allowed
  version: 2.0.0
  x-changelog:
    2.0.0:
      - "BREAKING: REST API modernization - updated all URL paths"
      - "BREAKING: Changed /session endpoints to /sessions (login, current user)"
      - "BREAKING: Moved OAuth endpoints from /session/oauth to /auth/oauth"
      - "BREAKING: Changed station_voices endpoints to kebab-case /station-voices"
      - "Added RFC 9457 Problem Details error format with application/problem+json"
      - "Updated all POST operations to return 201 Created (instead of 200)"
      - "Updated all DELETE operations to return 204 No Content"
      - "Added 422 Unprocessable Entity for validation errors"
      - "Added 409 Conflict for duplicate resource errors"
      - "Added modern query parameters: filter[], sort, fields, search, status"
      - "Added comprehensive request/response examples throughout"
      - "Replaced include_deleted parameter with status=all|active|deleted"
      - "Enhanced filtering with advanced operators: eq, ne, gt, gte, lt, lte, like, in, null"
      - "Added field selection with dot notation for nested fields"
      - "Added full-text search capability across relevant fields"
      - "Improved sort functionality with multiple fields and direction control"
    1.1.6:
      - "Added date format pattern validation (YYYY-MM-DD) for date fields"
      - "Added ID format specifications (int32) for all ID fields"
      - "Documented unique constraints with x-unique extension"
      - "Documented foreign key relationships with x-foreign-key extension"
      - "Added email pattern validation and unique-when-not-null constraint"
      - "Added username pattern validation (alphanumeric, underscore, hyphen)"
    1.1.5:
      - "Fixed StationVoice PUT response to include audio_url field"
      - "Added maxLength:255 to Station name to match database constraint"
      - "Added maxLength:255 to Voice name to match database constraint"
      - "Added maxLength:255 to User email to match database constraint"
      - "Documented form validation differences in StoryInput schema"
    1.1.4:
      - "Removed incorrect voice object from Story schema - only voice_name is returned"
      - "Fixed username maxLength from 50 to 100 to match database constraint"
      - "Added maxLength:500 to Story title to match database constraint"
    1.1.3:
      - "Fixed Station pause_seconds maximum constraint (60 seconds instead of 10)"
      - "Added missing 500 Internal Server Error status codes to 11 endpoints"
      - "Added minLength:1 constraints to required string fields (title, text, name)"
      - "Fixed Station max_stories_per_block minimum constraint (1 instead of 0)"
    1.1.2:
      - "Fixed password_changed_at field nullability in User schema to match Go implementation"
    1.1.1:
      - "Improved story filtering API - replaced voice_id=null with cleaner has_voice parameter (now deprecated)"
      - "voice_id now only filters by specific voice ID for better clarity"
      - "Added has_voice=true/false parameter for filtering stories with/without voice (now deprecated)"
    1.1.0:
      - "CRITICAL: Fixed database query bug in GetUser - added missing failed_login_attempts, locked_until, and metadata fields"
      - "CRITICAL: Changed bulletin_url to audio_url for API consistency"
      - "Fixed User schema - made full_name nullable to match implementation"
      - "Implemented date and weekday query parameters for GET /stories"
    1.0.9:
      - "Major OpenAPI documentation fixes and improvements"
      - "Added missing fields to PUT /station_voices/{id} endpoint (station_id, voice_id)"
      - "Added missing user response fields (failed_login_attempts, locked_until)"
      - "Added voice_name field to Story response schema"
      - "Documented proper response codes for PATCH /stories/{id} (200 and 204)"
      - "Fixed multipart/form-data field documentation for stories (weekdays as JSON string)"
    1.0.8:
      - "Added documentation for deleted_at field in PATCH /stories/{id} endpoint for story restoration"
    1.0.7:
      - "Added support for voice_id=null filter to find stories without assigned voice"
    1.0.6:
      - "BREAKING: voice_id field is now optional for stories"
    1.0.5:
      - "Standardized audio_url field naming across all endpoints"
    1.0.4:
      - "GET /session endpoint now returns complete User object with all fields"
    1.0.2:
      - "Added GET /api/v1/auth/config endpoint for authentication method discovery"
    1.0.0:
      - "Initial stable release"
      - "HTTP API for audio news bulletin generation"
      - "Station-specific voice jingles with mix points"
      - "Local and OAuth/OIDC authentication"
      - "Role-based access control (admin, editor, viewer)"
      - "Soft delete for stories and users"
      - "FFmpeg audio processing"
      - "Pagination and filtering on all list endpoints"
      - "RESTful design for radio automation"
      - "Removed redundant /broadcasts endpoint"
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  contact:
    name: Streekomroep ZuidWest
servers:
  - url: http://localhost:8080/api/v1
    description: Development server
  - url: https://your-api-server.com/api/v1
    description: Production server (configure with your domain)

tags:
  - name: System
    description: System health and status endpoints
  - name: Authentication
    description: User authentication and session management
  - name: Stations
    description: Radio station management
  - name: Voices
    description: Voice/presenter management
  - name: Stories
    description: News story management
  - name: Audio
    description: Audio file serving
  - name: Users
    description: User account management
  - name: Bulletin
    description: Audio bulletin generation
  - name: Station-Voices
    description: Station-specific voice jingle management

security:
  - cookieAuth: []

paths:
  /health:
    get:
      summary: Health check endpoint
      tags:
        - System
      security: []
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
                  service:
                    type: string
                    example: babbel-api

  /auth/config:
    get:
      summary: Get authentication configuration
      description: Returns available authentication methods for the API
      tags:
        - Authentication
      security: []
      responses:
        '200':
          description: Authentication configuration
          content:
            application/json:
              schema:
                type: object
                required:
                  - methods
                properties:
                  methods:
                    type: array
                    description: Available authentication methods
                    items:
                      type: string
                      enum: [local, oidc]
                    example: ["local", "oidc"]
                  oauth_url:
                    type: string
                    description: URL to start OAuth flow (only present when OAuth is enabled)
                    example: "/api/v1/auth/oauth"

  /sessions:
    post:
      summary: Login with username and password (local authentication)
      tags:
        - Authentication
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  example: admin
                password:
                  type: string
                  example: password
      responses:
        '201':
          description: Session created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Session created successfully
          headers:
            Set-Cookie:
              schema:
                type: string
                description: Session cookie
        '401':
          $ref: '#/components/responses/Unauthorized'

  /auth/oauth:
    get:
      summary: Start OAuth/OIDC authentication flow
      tags:
        - Authentication
      security: []
      description: |
        Redirects to the configured OAuth provider (Azure AD, Google, etc.).
        For headless frontends, specify `frontend_url` parameter to control where users are redirected after login.
      parameters:
        - name: frontend_url
          in: query
          required: false
          schema:
            type: string
            format: uri
          description: |
            Frontend URL to redirect to after successful authentication.
            If not provided, uses BABBEL_FRONTEND_URL environment variable.
          example: "https://your-frontend.com/dashboard"
      responses:
        '302':
          description: Redirect to OAuth provider
          headers:
            Location:
              schema:
                type: string
                description: OAuth provider authorization URL
        '400':
          $ref: '#/components/responses/BadRequest'

  /auth/oauth/callback:
    get:
      summary: OAuth callback endpoint
      tags:
        - Authentication
      security: []
      description: |
        Handles the OAuth callback from the provider and redirects to the frontend.
        This endpoint is called by the OAuth provider after user authentication.
      parameters:
        - name: code
          in: query
          required: true
          schema:
            type: string
          description: Authorization code from OAuth provider
        - name: state
          in: query
          required: true
          schema:
            type: string
          description: CSRF protection state
        - name: error
          in: query
          required: false
          schema:
            type: string
          description: Error from OAuth provider (if authentication failed)
      responses:
        '302':
          description: Redirect to frontend application
          headers:
            Location:
              schema:
                type: string
                description: |
                  Frontend URL with status parameters:
                  - Success: `https://frontend.com/dashboard?login=success`
                  - Error: `https://frontend.com/dashboard?error=<error_message>`
              examples:
                success:
                  value: "https://your-frontend.com/dashboard?login=success"
                error:
                  value: "https://your-frontend.com/dashboard?error=invalid_credentials"
        '500':
          $ref: '#/components/responses/InternalServerError'

  /sessions/current:
    get:
      summary: Get current user information
      tags:
        - Authentication
      description: Returns the complete user object for the authenticated user, including full_name, email, and login statistics.
      responses:
        '200':
          description: Current user information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
    delete:
      summary: Logout and destroy session
      tags:
        - Authentication
      responses:
        '204':
          description: Session terminated successfully

  /stations:
    get:
      summary: List all stations
      description: |
        Returns a paginated list of radio stations with modern query parameter support.
        
        ## Search Fields
        Full-text search across:
        - `s.name` - Station name
        
        ## Filter Fields
        Available filter fields:
        - `id` - Station ID
        - `name` - Station name (supports like operator for pattern matching)
        - `max_stories_per_block` - Maximum stories per bulletin block
        - `pause_seconds` - Pause duration between stories
        - `created_at` - Creation timestamp
        - `updated_at` - Last update timestamp
        
        ## Sort Fields
        Available sort fields:
        - `id` - Station ID
        - `name` - Station name (default: ascending)
        - `max_stories_per_block` - Max stories per block
        - `pause_seconds` - Pause duration
        - `created_at` - Creation timestamp
        - `updated_at` - Last update timestamp
        
        ## Examples
        - Search by name: `?search=Radio`
        - Filter by name pattern: `?filter[name][like]=%FM%`
        - Sort by creation date: `?sort=-created_at`
        - Filter by max stories: `?filter[max_stories_per_block][gte]=5`
        - Field selection: `?fields=id,name,max_stories_per_block`
        - Complex query: `?search=Radio&filter[max_stories_per_block][gte]=5&sort=name&fields=id,name`
      tags:
        - Stations
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/filter'
      responses:
        '200':
          description: List of stations with pagination metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StationsListResponse'
              examples:
                basic_list:
                  summary: Basic station list
                  value:
                    data:
                      - id: 1
                        name: "Radio Station 1"
                        max_stories_per_block: 5
                        pause_seconds: 2.0
                        created_at: "2024-01-15T10:30:00Z"
                        updated_at: "2024-01-15T10:30:00Z"
                      - id: 2
                        name: "News FM"
                        max_stories_per_block: 8
                        pause_seconds: 1.5
                        created_at: "2024-01-16T14:20:00Z"
                        updated_at: "2024-01-16T14:20:00Z"
                    total: 2
                    limit: 20
                    offset: 0
                search_example:
                  summary: Search results for "Radio"
                  value:
                    data:
                      - id: 1
                        name: "Radio Station 1"
                        max_stories_per_block: 5
                        pause_seconds: 2.0
                        created_at: "2024-01-15T10:30:00Z"
                        updated_at: "2024-01-15T10:30:00Z"
                    total: 1
                    limit: 20
                    offset: 0
                field_selection:
                  summary: Field selection (fields=id,name,max_stories_per_block)
                  value:
                    data:
                      - id: 1
                        name: "Radio Station 1"
                        max_stories_per_block: 5
                      - id: 2
                        name: "News FM"
                        max_stories_per_block: 8
                    total: 2
                    limit: 20
                    offset: 0
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: Create a new station
      tags:
        - Stations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StationInput'
      responses:
        '201':
          description: Station created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Station'
              examples:
                created_station:
                  summary: Newly created station
                  value:
                    id: 3
                    name: "Community Radio"
                    max_stories_per_block: 6
                    pause_seconds: 2.5
                    created_at: "2024-01-20T09:15:00Z"
                    updated_at: "2024-01-20T09:15:00Z"
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /stations/{id}:
    get:
      summary: Get station by ID
      tags:
        - Stations
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: Station details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Station'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      summary: Update station
      tags:
        - Stations
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StationInput'
      responses:
        '200':
          description: Station updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Station'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      summary: Delete station
      tags:
        - Stations
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '204':
          description: Station deleted
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /voices:
    get:
      summary: List all voices
      description: |
        Returns a paginated list of newsreader voices with modern query parameter support.
        
        ## Search Fields
        Full-text search across:
        - `name` - Voice name
        
        ## Filter Fields
        Available filter fields:
        - `id` - Voice ID
        - `name` - Voice name (supports like operator for pattern matching)
        - `created_at` - Creation timestamp
        
        ## Sort Fields
        Available sort fields:
        - `id` - Voice ID
        - `name` - Voice name (default: ascending)
        - `created_at` - Creation timestamp
        - `updated_at` - Last update timestamp
        
        ## Examples
        - Search by name: `?search=John`
        - Filter by name pattern: `?filter[name][like]=%Announcer%`
        - Sort by name descending: `?sort=-name`
        - Multiple filters: `?filter[id][in]=1,2,3&sort=name`
        - Field selection: `?fields=id,name,created_at`
        - Complex query: `?search=Voice&filter[id][in]=1,2,3&sort=-name&fields=id,name&limit=10`
      tags:
        - Voices
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/filter'
      responses:
        '200':
          description: List of voices with pagination metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VoicesListResponse'
              examples:
                basic_list:
                  summary: Basic voice list
                  value:
                    data:
                      - id: 1
                        name: "Sarah Johnson"
                        created_at: "2024-01-15T10:30:00Z"
                        updated_at: "2024-01-15T10:30:00Z"
                      - id: 2
                        name: "Mike Davis"
                        created_at: "2024-01-16T14:20:00Z"
                        updated_at: "2024-01-16T14:20:00Z"
                    total: 2
                    limit: 20
                    offset: 0
                search_example:
                  summary: Search results for "Johnson"
                  value:
                    data:
                      - id: 1
                        name: "Sarah Johnson"
                        created_at: "2024-01-15T10:30:00Z"
                        updated_at: "2024-01-15T10:30:00Z"
                    total: 1
                    limit: 20
                    offset: 0
                field_selection:
                  summary: Field selection (fields=id,name)
                  value:
                    data:
                      - id: 1
                        name: "Sarah Johnson"
                      - id: 2
                        name: "Mike Davis"
                    total: 2
                    limit: 20
                    offset: 0
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: Create a new voice
      tags:
        - Voices
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  minLength: 1
                  maxLength: 255
      responses:
        '201':
          description: Voice created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Voice'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /voices/{id}:
    get:
      summary: Get voice by ID
      tags:
        - Voices
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: Voice details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Voice'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      summary: Update voice
      tags:
        - Voices
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  minLength: 1
                  maxLength: 255
      responses:
        '200':
          description: Voice updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Voice'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      summary: Delete voice
      tags:
        - Voices
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '204':
          description: Voice deleted
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /stories:
    get:
      summary: List all stories
      description: |
        List stories with modern query parameter support.
        
        ## Date Filtering
        Use date range filters to find stories active on specific dates:
        - `filter[start_date][lte]=2024-06-15` - Start date before or on date
        - `filter[end_date][gte]=2024-06-15` - End date after or on date
        
        ## Weekday Filtering
        Filter by specific weekdays:
        - `filter[monday]=1` - Stories scheduled for Monday
        - `filter[friday]=1` - Stories scheduled for Friday
        
        ## Voice Filtering
        - `filter[voice_id]=5` - Stories with specific voice
        - `filter[voice_id][ne]=null` - Stories with any voice assigned
        - `filter[voice_id][null]=true` - Stories without voice
        
        ## Examples
        - Active stories on June 15, 2024: `?filter[start_date][lte]=2024-06-15&filter[end_date][gte]=2024-06-15`
        - Monday stories with voice: `?filter[monday]=1&filter[voice_id][ne]=null`
        - Search with sorting: `?search=breaking&sort=-created_at`
      tags:
        - Stories
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/status'
        - $ref: '#/components/parameters/filter'
      responses:
        '200':
          description: List of stories
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Story'
                  total:
                    type: integer
                  limit:
                    type: integer
                  offset:
                    type: integer
              examples:
                basic_list:
                  summary: Basic story list
                  value:
                    data:
                      - id: 101
                        title: "Breaking News Update"
                        text: "This is an important news update."
                        voice_id: 1
                        voice_name: "Sarah Johnson"
                        status: "active"
                        start_date: "2024-01-20T00:00:00Z"
                        end_date: "2024-01-27T23:59:59Z"
                        monday: true
                        tuesday: true
                        wednesday: true
                        thursday: true
                        friday: true
                        saturday: false
                        sunday: false
                        weekdays:
                          monday: true
                          tuesday: true
                          wednesday: true
                          thursday: true
                          friday: true
                          saturday: false
                          sunday: false
                        created_at: "2024-01-20T10:00:00Z"
                        updated_at: "2024-01-20T10:00:00Z"
                        deleted_at: null
                    total: 1
                    limit: 20
                    offset: 0
                filtered_by_voice:
                  summary: Stories filtered by voice (filter[voice_id][ne]=null)
                  value:
                    data:
                      - id: 101
                        title: "Breaking News Update"
                        voice_id: 1
                        voice_name: "Sarah Johnson"
                        status: "active"
                    total: 1
                    limit: 20
                    offset: 0
                field_selection:
                  summary: Stories with field selection (fields=id,title,voice_name)
                  value:
                    data:
                      - id: 101
                        title: "Breaking News Update"
                        voice_name: "Sarah Johnson"
                    total: 1
                    limit: 20
                    offset: 0
    post:
      summary: Create a new story
      tags:
        - Stories
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/StoryInput'
            example:
              title: "Breaking News Update"
              text: "This is important news content for our listeners."
              voice_id: "1"
              status: "active"
              start_date: "2024-01-20T00:00:00Z"
              end_date: "2024-01-27T23:59:59Z"
              monday: "true"
              tuesday: "true"
              wednesday: "true"
              thursday: "true"
              friday: "true"
              saturday: "false"
              sunday: "false"
              metadata: "{\"priority\": \"high\", \"category\": \"breaking\"}"
      responses:
        '201':
          description: Story created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Story'
              examples:
                created_story:
                  summary: Newly created story
                  value:
                    id: 101
                    title: "Breaking News Update"
                    text: "This is an important news update for our listeners."
                    voice_id: 1
                    voice_name: "Sarah Johnson"
                    audio_url: "/stories/101/audio"
                    duration_seconds: 45.2
                    status: "active"
                    start_date: "2024-01-20T00:00:00Z"
                    end_date: "2024-01-27T23:59:59Z"
                    monday: true
                    tuesday: true
                    wednesday: true
                    thursday: true
                    friday: true
                    saturday: false
                    sunday: false
                    weekdays:
                      monday: true
                      tuesday: true
                      wednesday: true
                      thursday: true
                      friday: true
                      saturday: false
                      sunday: false
                    metadata: {}
                    created_at: "2024-01-20T10:00:00Z"
                    updated_at: "2024-01-20T10:00:00Z"
                    deleted_at: null
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /stories/{id}/audio:
    get:
      summary: Download story audio file
      tags:
        - Stories
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: Audio file
          content:
            audio/wav:
              schema:
                type: string
                format: binary
        '404':
          description: Story not found or no audio file

  /stories/{id}:
    get:
      summary: Get story by ID
      tags:
        - Stories
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: Story details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Story'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      summary: Update story
      tags:
        - Stories
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/StoryInput'
            example:
              title: "Updated Breaking News"
              text: "This is the updated news content."
              voice_id: "2"
              status: "active"
              monday: "false"
              tuesday: "true"
              metadata: "{\"priority\": \"medium\"}"
      responses:
        '200':
          description: Story updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Story'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      summary: Delete story (soft delete)
      description: |
        Performs a soft delete by setting deleted_at timestamp. 
        The story will no longer appear in listings unless include_deleted=true is specified.
        Story data and audio files are preserved for potential restoration.
      tags:
        - Stories
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '204':
          description: Story soft deleted successfully
        '404':
          $ref: '#/components/responses/NotFound'
    patch:
      summary: Update story state
      description: |
        Update story status or restore soft-deleted stories. 
        This endpoint can be used to:
        - Change story status (draft, active, expired)
        - Restore a soft-deleted story by setting deleted_at to empty string
      tags:
        - Stories
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: [draft, active, expired]
                  description: Story status
                deleted_at:
                  type: string
                  description: Set to empty string ("") to restore a soft-deleted story, or any other value to soft-delete
              example:
                updateStatus:
                  summary: Update story status
                  value:
                    status: "active"
                restoreStory:
                  summary: Restore a soft-deleted story
                  value:
                    deleted_at: ""
      responses:
        '200':
          description: Story state updated successfully (status change or restore)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Story status updated successfully"
        '204':
          description: Story soft-deleted successfully (when deleted_at is set to a non-empty value)
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'

  /stories/{id}/bulletins:
    get:
      summary: Get bulletin history for a story
      description: |
        Returns all bulletins that have included this specific story with modern query parameter support.
        Ordered by most recent inclusion first by default.
        
        ## Search Fields
        Full-text search across:
        - `b.filename` - Bulletin filename
        - `s.name` - Station name
        
        ## Filter Fields
        Available filter fields:
        - `id` - Bulletin ID
        - `bulletin_id` - Bulletin ID (same as id)
        - `station_id` - Station ID
        - `filename` - Bulletin filename
        - `file_path` - File path
        - `duration_seconds` - Duration in seconds
        - `file_size` - File size in bytes
        - `story_count` - Number of stories in bulletin
        - `created_at` - Bulletin creation timestamp
        - `station_name` - Station name (from join)
        - `story_order` - Order of story in bulletin
        - `included_at` - When story was included in bulletin
        
        ## Sort Fields
        Available sort fields:
        - `id` - Bulletin ID
        - `station_id` - Station ID
        - `filename` - Bulletin filename
        - `duration_seconds` - Duration
        - `file_size` - File size
        - `story_count` - Number of stories
        - `created_at` - Bulletin creation timestamp
        - `station_name` - Station name
        - `story_order` - Story order in bulletin
        - `included_at` - Inclusion timestamp (default: descending)
        
        ## Examples
        - Search by bulletin filename: `?search=bulletin_2024`
        - Filter by station: `?filter[station_id]=1`
        - Filter by date range: `?filter[included_at][gte]=2024-01-01`
        - Sort by story order: `?sort=story_order`
        - Field selection: `?fields=id,filename,story_order,included_at`
        - Complex query: `?search=bulletin&filter[story_order][lte]=2&sort=-included_at&fields=id,filename,story_order`
      tags:
        - Stories
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/filter'
      responses:
        '200':
          description: Story bulletin history with pagination metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoryBulletinsListResponse'
              examples:
                basic_history:
                  summary: Basic bulletin history for story
                  value:
                    data:
                      - id: 150
                        station_id: 1
                        station_name: "Radio Station 1"
                        filename: "bulletin_150_20240120_140500.wav"
                        audio_url: "/bulletins/150/audio"
                        duration: 185.4
                        file_size: 2965440
                        story_count: 4
                        created_at: "2024-01-20T14:05:00Z"
                        story_order: 0
                        included_at: "2024-01-20T14:05:00Z"
                      - id: 149
                        station_id: 1
                        station_name: "Radio Station 1"
                        filename: "bulletin_149_20240120_140200.wav"
                        audio_url: "/bulletins/149/audio"
                        duration: 178.2
                        file_size: 2845568
                        story_count: 3
                        created_at: "2024-01-20T14:02:00Z"
                        story_order: 1
                        included_at: "2024-01-20T14:02:00Z"
                    total: 2
                    limit: 20
                    offset: 0
                field_selection:
                  summary: Field selection (fields=id,filename,story_order,included_at)
                  value:
                    data:
                      - id: 150
                        filename: "bulletin_150_20240120_140500.wav"
                        story_order: 0
                        included_at: "2024-01-20T14:05:00Z"
                      - id: 149
                        filename: "bulletin_149_20240120_140200.wav"
                        story_order: 1
                        included_at: "2024-01-20T14:02:00Z"
                    total: 2
                    limit: 20
                    offset: 0
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users:
    get:
      summary: List all users
      tags:
        - Users
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/status'
        - $ref: '#/components/parameters/filter'
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  total:
                    type: integer
                  limit:
                    type: integer
                  offset:
                    type: integer
    post:
      summary: Create a new user
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'

  /users/{id}:
    get:
      summary: Get user by ID
      tags:
        - Users
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      summary: Update user
      description: |
        Update user information. All fields are optional - only provided fields will be updated.
        Can also suspend/restore users by setting the suspended field to true/false.
      tags:
        - Users
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      summary: Permanently delete user
      description: |
        Permanently deletes a user account and all associated data.
        This action cannot be undone. All active sessions for the user will be terminated.
        Cannot delete the last admin user.
      tags:
        - Users
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '204':
          description: User permanently deleted
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
    patch:
      summary: Update user state  
      description: |
        Update user state (suspend/restore) without requiring full user data. 
        This is an alternative to using PUT /users/{id} with the suspended field.
        Use this endpoint when you only want to change suspension status without providing other user fields.
      tags:
        - Users
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                action:
                  type: string
                  enum: [suspend, restore]
                  description: Action to perform on user account
              required:
                - action
              example:
                action: "suspend"
      responses:
        '200':
          description: User state updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User suspended successfully"
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'



  /bulletins:
    get:
      summary: List bulletins
      description: |
        Returns a paginated list of generated bulletins with modern query parameter support.
        
        ## Search Fields
        Full-text search across:
        - `b.filename` - Bulletin filename
        - `s.name` - Station name
        
        ## Filter Fields
        Available filter fields:
        - `id` - Bulletin ID
        - `station_id` - Station ID
        - `filename` - Bulletin filename
        - `file_path` - File path
        - `duration_seconds` - Duration in seconds
        - `file_size` - File size in bytes
        - `story_count` - Number of stories in bulletin
        - `metadata` - JSON metadata
        - `created_at` - Creation timestamp
        - `station_name` - Station name (from join)
        
        ## Sort Fields
        Available sort fields:
        - `id` - Bulletin ID
        - `station_id` - Station ID
        - `filename` - Bulletin filename
        - `duration_seconds` - Duration
        - `file_size` - File size
        - `story_count` - Number of stories
        - `created_at` - Creation timestamp (default: descending)
        - `station_name` - Station name
        
        ## Notes
        To get story information for a bulletin, use GET /bulletins/{id}/stories after fetching the bulletin list.
        
        ## Examples
        - Search by filename: `?search=bulletin_2024`
        - Filter by station: `?filter[station_id]=1`
        - Filter by date range: `?filter[created_at][gte]=2024-01-01`
        - Sort by duration: `?sort=-duration_seconds`
        - Filter by story count: `?filter[story_count][gte]=3`
        - Field selection: `?fields=id,filename,duration_seconds,story_count,created_at`
        - Complex query: `?search=2024&filter[station_id]=1&filter[story_count][gte]=3&sort=-created_at`
      tags:
        - Bulletin
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/filter'
      responses:
        '200':
          description: List of bulletins with pagination metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulletinsListResponse'
              examples:
                basic_list:
                  summary: Basic bulletin list
                  value:
                    data:
                      - id: 150
                        station_id: 1
                        station_name: "Radio Station 1"
                        filename: "bulletin_150_20240120_140500.wav"
                        audio_url: "/bulletins/150/audio"
                        duration: 185.4
                        file_size: 2965440
                        story_count: 4
                        created_at: "2024-01-20T14:05:00Z"
                      - id: 149
                        station_id: 1
                        station_name: "Radio Station 1"
                        filename: "bulletin_149_20240120_140200.wav"
                        audio_url: "/bulletins/149/audio"
                        duration: 178.2
                        file_size: 2845568
                        story_count: 3
                        created_at: "2024-01-20T14:02:00Z"
                    total: 2
                    limit: 20
                    offset: 0
                filtered_by_station:
                  summary: Bulletins filtered by station ID
                  value:
                    data:
                      - id: 150
                        station_id: 1
                        station_name: "Radio Station 1"
                        filename: "bulletin_150_20240120_140500.wav"
                        duration: 185.4
                        story_count: 4
                    total: 1
                    limit: 20
                    offset: 0
                field_selection:
                  summary: Field selection (fields=id,filename,duration_seconds,story_count)
                  value:
                    data:
                      - id: 150
                        filename: "bulletin_150_20240120_140500.wav"
                        duration_seconds: 185.4
                        story_count: 4
                      - id: 149
                        filename: "bulletin_149_20240120_140200.wav"
                        duration_seconds: 178.2
                        story_count: 3
                    total: 2
                    limit: 20
                    offset: 0
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'


  /stations/{id}/bulletins:
    get:
      summary: List bulletins for a station
      description: |
        Returns a paginated list of bulletins generated for a specific station with modern query parameter support.
        Ordered by most recent first by default.
        
        ## Search Fields
        Full-text search across:
        - `b.filename` - Bulletin filename
        - `s.name` - Station name
        
        ## Filter Fields
        Available filter fields:
        - `id` - Bulletin ID
        - `station_id` - Station ID (automatically filtered by path parameter)
        - `filename` - Bulletin filename
        - `file_path` - File path
        - `duration_seconds` - Duration in seconds
        - `file_size` - File size in bytes
        - `story_count` - Number of stories in bulletin
        - `created_at` - Creation timestamp
        - `station_name` - Station name (from join)
        
        ## Sort Fields
        Available sort fields:
        - `id` - Bulletin ID
        - `filename` - Bulletin filename
        - `duration_seconds` - Duration
        - `file_size` - File size
        - `story_count` - Number of stories
        - `created_at` - Creation timestamp (default: descending)
        - `station_name` - Station name
        
        ## Special Parameters
        - `latest=true` - Returns only the latest bulletin (equivalent to `limit=1`)
        
        ## Notes
        To get story information for bulletins, use GET /bulletins/{id}/stories for each bulletin.
        
        ## Examples
        - Latest bulletin: `?latest=true`
        - Search by filename: `?search=bulletin_2024`
        - Filter by date range: `?filter[created_at][gte]=2024-01-01`
        - Sort by duration: `?sort=-duration_seconds`
        - Field selection: `?fields=id,filename,duration_seconds,created_at`
        - Complex query: `?search=2024&filter[story_count][gte]=3&sort=-created_at&fields=id,filename,story_count`
      tags:
        - Bulletin
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/filter'
        - name: latest
          in: query
          required: false
          schema:
            type: boolean
            default: false
          description: Return only the latest bulletin for this station (equivalent to limit=1)
      responses:
        '200':
          description: List of station bulletins with pagination metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulletinsListResponse'
              examples:
                basic_list:
                  summary: Basic bulletin list for station
                  value:
                    data:
                      - id: 150
                        station_id: 1
                        station_name: "Radio Station 1"
                        filename: "bulletin_150_20240120_140500.wav"
                        audio_url: "/bulletins/150/audio"
                        duration: 185.4
                        file_size: 2965440
                        story_count: 4
                        created_at: "2024-01-20T14:05:00Z"
                      - id: 149
                        station_id: 1
                        station_name: "Radio Station 1"
                        filename: "bulletin_149_20240120_140200.wav"
                        audio_url: "/bulletins/149/audio"
                        duration: 178.2
                        file_size: 2845568
                        story_count: 3
                        created_at: "2024-01-20T14:02:00Z"
                    total: 2
                    limit: 20
                    offset: 0
                latest_bulletin:
                  summary: Latest bulletin (latest=true)
                  value:
                    data:
                      - id: 150
                        station_id: 1
                        station_name: "Radio Station 1"
                        filename: "bulletin_150_20240120_140500.wav"
                        audio_url: "/bulletins/150/audio"
                        duration: 185.4
                        file_size: 2965440
                        story_count: 4
                        created_at: "2024-01-20T14:05:00Z"
                    total: 1
                    limit: 1
                    offset: 0
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: Generate news bulletin for a station
      description: |
        Generates a news bulletin for a specific station with smart caching and flexible response options.
        
        ## HTTP Headers for Control
        - `Accept: audio/wav` - Return WAV file directly instead of JSON response
        - `Cache-Control: no-cache` - Force new generation ignoring cache
        - `Cache-Control: max-age=N` - Reuse existing bulletin if created within N seconds
        
        ## Response Headers
        - `X-Cache: HIT|MISS` - Indicates if bulletin was served from cache or freshly generated
        - `Age: N` - Age of the bulletin in seconds (0 for fresh bulletins)
        
        ## Notes
        To get story information, use the separate GET /bulletins/{id}/stories endpoint after bulletin generation.
      tags:
        - Bulletin
      parameters:
        - $ref: '#/components/parameters/id'
        - name: Accept
          in: header
          required: false
          schema:
            type: string
            enum: [application/json, audio/wav]
            default: application/json
          description: Response format - use 'audio/wav' to download file directly
        - name: Cache-Control
          in: header
          required: false
          schema:
            type: string
            example: "max-age=300"
          description: |
            Cache control directives:
            - `no-cache` - Force new generation ignoring existing bulletins
            - `max-age=N` - Reuse bulletin if created within N seconds
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                date:
                  type: string
                  format: date
                  description: Date for bulletin in YYYY-MM-DD format (defaults to today)
      responses:
        '200':
          description: Bulletin generated successfully or WAV file if download=true
          headers:
            X-Cache:
              schema:
                type: string
                enum: [HIT, MISS]
              description: |
                Cache status indicator:
                - `HIT` - Bulletin served from cache (existing bulletin reused)
                - `MISS` - Bulletin freshly generated
            Age:
              schema:
                type: integer
                minimum: 0
              description: Age of the bulletin in seconds (0 for freshly generated bulletins)
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    format: int64
                    description: Bulletin ID (if saved to database)
                  station_id:
                    type: integer
                    description: Station ID
                  station_name:
                    type: string
                    description: Station name
                  audio_url:
                    type: string
                    description: URL to download the audio file
                  filename:
                    type: string
                    description: Bulletin filename
                  created_at:
                    type: string
                    format: date-time
                    description: When the bulletin was created
                  duration:
                    type: number
                    format: float
                    description: Duration in seconds
                  file_size:
                    type: integer
                    format: int64
                    description: File size in bytes
                  story_count:
                    type: integer
                    description: Number of stories in the bulletin
              examples:
                fresh_bulletin:
                  summary: Newly generated bulletin
                  value:
                    id: 150
                    station_id: 1
                    station_name: "Radio Station 1"
                    audio_url: "/bulletins/150/audio"
                    filename: "bulletin_150_20240120_140500.wav"
                    created_at: "2024-01-20T14:05:00Z"
                    duration: 185.4
                    file_size: 2965440
                    story_count: 4
                cached_bulletin:
                  summary: Cached bulletin (from max_age parameter - check X-Cache header)
                  value:
                    id: 149
                    station_id: 1
                    station_name: "Radio Station 1"
                    audio_url: "/bulletins/149/audio"
                    filename: "bulletin_149_20240120_140200.wav"
                    created_at: "2024-01-20T14:02:00Z"
                    duration: 178.2
                    file_size: 2845568
                    story_count: 3
            audio/wav:
              schema:
                type: string
                format: binary
                description: WAV audio file (when download=true)
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          description: Station not found or no stories available

  /bulletins/{id}/audio:
    get:
      summary: Download bulletin audio file
      tags:
        - Bulletin
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: Audio file
          content:
            audio/wav:
              schema:
                type: string
                format: binary
        '404':
          description: Bulletin not found or no audio file

  /bulletins/{id}/stories:
    get:
      summary: List stories included in a bulletin
      description: |
        Returns a paginated list of stories that were included in a specific bulletin with modern query parameter support.
        Ordered by story appearance order (story_order) by default.
        
        ## Search Fields
        Full-text search across:
        - `st.title` - Story title
        - `s.name` - Station name
        - `b.filename` - Bulletin filename
        
        ## Filter Fields
        Available filter fields:
        - `id` - Bulletin-story relationship ID
        - `bulletin_id` - Bulletin ID (automatically filtered by path parameter)
        - `story_id` - Story ID
        - `story_order` - Order of story in bulletin
        - `created_at` - When story was added to bulletin
        - `station_id` - Station ID (from bulletin join)
        - `station_name` - Station name (from join)
        - `story_title` - Story title (from join)
        - `bulletin_filename` - Bulletin filename (from join)
        
        ## Sort Fields
        Available sort fields:
        - `id` - Relationship ID
        - `story_id` - Story ID
        - `story_order` - Story order in bulletin (default: ascending)
        - `created_at` - Addition timestamp
        - `station_name` - Station name
        - `story_title` - Story title
        - `bulletin_filename` - Bulletin filename
        
        ## Examples
        - Search by story title: `?search=breaking`
        - Filter by story order: `?filter[story_order][lte]=3`
        - Sort by story title: `?sort=story_title`
        - Field selection: `?fields=id,story_id,story_order,story_title`
        - Complex query: `?search=news&filter[story_order][lte]=5&sort=story_order&fields=id,story_title,story_order`
      tags:
        - Bulletin
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/filter'
      responses:
        '200':
          description: List of stories in the bulletin with pagination metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulletinStoriesListResponse'
              examples:
                basic_list:
                  summary: Stories in bulletin ordered by appearance
                  value:
                    data:
                      - id: 1
                        bulletin_id: 150
                        story_id: 101
                        story_order: 0
                        created_at: "2024-01-20T14:05:00Z"
                        station:
                          id: 1
                          name: "Radio Station 1"
                        story:
                          id: 101
                          title: "Breaking News Update"
                        bulletin:
                          id: 150
                          filename: "bulletin_150_20240120_140500.wav"
                      - id: 2
                        bulletin_id: 150
                        story_id: 102
                        story_order: 1
                        created_at: "2024-01-20T14:05:00Z"
                        station:
                          id: 1
                          name: "Radio Station 1"
                        story:
                          id: 102
                          title: "Weather Report"
                        bulletin:
                          id: 150
                          filename: "bulletin_150_20240120_140500.wav"
                    total: 2
                    limit: 20
                    offset: 0
                field_selection:
                  summary: Field selection (fields=id,story_order,story_title)
                  value:
                    data:
                      - id: 1
                        story_order: 0
                        story_title: "Breaking News Update"
                      - id: 2
                        story_order: 1
                        story_title: "Weather Report"
                    total: 2
                    limit: 20
                    offset: 0
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /station-voices:
    get:
      summary: List station-voice relationships
      description: |
        Returns a paginated list of station-voice relationships with modern query parameter support.
        Includes station and voice information via database joins.
        
        ## Search Fields
        Full-text search across:
        - `s.name` - Station name
        - `v.name` - Voice name
        
        ## Filter Fields
        Available filter fields:
        - `id` - Station-voice relationship ID
        - `station_id` - Station ID
        - `voice_id` - Voice ID
        - `jingle_file` - Jingle filename
        - `mix_point` - Mix point in seconds
        - `created_at` - Creation timestamp
        - `updated_at` - Last update timestamp
        - `station_name` - Station name (from join)
        - `voice_name` - Voice name (from join)
        
        ## Sort Fields
        Available sort fields:
        - `id` - Relationship ID (default: descending)
        - `station_id` - Station ID
        - `voice_id` - Voice ID
        - `mix_point` - Mix point value
        - `created_at` - Creation timestamp
        - `updated_at` - Last update timestamp
        - `station_name` - Station name
        - `voice_name` - Voice name
        
        ## Examples
        - Search by station name: `?search=Radio`
        - Filter by station: `?filter[station_id]=1`
        - Filter by voice: `?filter[voice_id]=2`
        - Sort by station name: `?sort=station_name`
        - Field selection: `?fields=id,station_name,voice_name,mix_point`
        - Complex query: `?search=Radio&filter[station_id]=1&sort=-created_at&fields=id,station_name,voice_name`
      tags:
        - Station-Voices
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/filter'
      responses:
        '200':
          description: List of station-voice relationships with pagination metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StationVoicesListResponse'
              examples:
                basic_list:
                  summary: Basic station-voice relationships
                  value:
                    data:
                      - id: 1
                        station_id: 1
                        voice_id: 1
                        station_name: "Radio Station 1"
                        voice_name: "Sarah Johnson"
                        mix_point: 2.5
                        audio_url: "/station-voices/1/audio"
                        created_at: "2024-01-15T10:30:00Z"
                        updated_at: "2024-01-15T10:30:00Z"
                      - id: 2
                        station_id: 1
                        voice_id: 2
                        station_name: "Radio Station 1"
                        voice_name: "Mike Davis"
                        mix_point: 3.0
                        audio_url: null
                        created_at: "2024-01-16T14:20:00Z"
                        updated_at: "2024-01-16T14:20:00Z"
                    total: 2
                    limit: 20
                    offset: 0
                search_example:
                  summary: Search results for "Radio"
                  value:
                    data:
                      - id: 1
                        station_id: 1
                        voice_id: 1
                        station_name: "Radio Station 1"
                        voice_name: "Sarah Johnson"
                        mix_point: 2.5
                    total: 1
                    limit: 20
                    offset: 0
                field_selection:
                  summary: Field selection (fields=id,station_name,voice_name,mix_point)
                  value:
                    data:
                      - id: 1
                        station_name: "Radio Station 1"
                        voice_name: "Sarah Johnson"
                        mix_point: 2.5
                    total: 1
                    limit: 20
                    offset: 0
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: Create a new station-voice relationship
      tags:
        - Station-Voices
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - station_id
                - voice_id
              properties:
                station_id:
                  type: integer
                  description: Station ID
                voice_id:
                  type: integer
                  description: Voice ID  
                mix_point:
                  type: number
                  format: float
                  minimum: 0
                  default: 0.0
                  description: Mix point in seconds (0-300)
                jingle:
                  type: string
                  format: binary
                  description: Station-specific jingle audio file (optional)
              description: |
                Create station-voice relationship with optional jingle file
                
                **Form Field Examples**:
                ```
                station_id: "1"
                voice_id: "2"
                mix_point: "2.5"
                jingle: <binary audio file>
                ```
                
                **Important**: Numeric values must be sent as strings in form data.
      responses:
        '201':
          description: Station-voice relationship created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StationVoice'
        '400':
          $ref: '#/components/responses/BadRequest'

  /station-voices/{id}/audio:
    get:
      summary: Download station-voice jingle file
      tags:
        - Station-Voices
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: Jingle audio file
          content:
            audio/wav:
              schema:
                type: string
                format: binary
        '404':
          description: Station-voice not found or no jingle file

  /station-voices/{id}:
    get:
      summary: Get station-voice relationship by ID
      tags:
        - Station-Voices
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: Station-voice relationship details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StationVoice'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      summary: Update station-voice relationship
      description: |
        Update station-voice relationship properties. All fields are optional - only provided fields will be updated.
        When updating station_id or voice_id, the system checks for duplicate combinations.
      tags:
        - Station-Voices
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                station_id:
                  type: integer
                  description: New station ID (optional)
                voice_id:
                  type: integer
                  description: New voice ID (optional)
                mix_point:
                  type: number
                  format: float
                  minimum: 0
                  maximum: 300
                  description: Mix point in seconds (0-300)
                jingle:
                  type: string
                  format: binary
                  description: New station-specific jingle audio file (optional)
              description: |
                Update station-voice relationship with optional new jingle file
                
                **Form Field Examples** (all optional):
                ```
                station_id: "1"
                voice_id: "3"
                mix_point: "3.0"
                jingle: <binary audio file>
                ```
                
                **Important**: Only provide fields you want to update. Numeric values must be sent as strings in form data.
      responses:
        '200':
          description: Station-voice relationship updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StationVoice'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      summary: Delete station-voice relationship
      tags:
        - Station-Voices
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '204':
          description: Station-voice relationship deleted
        '404':
          $ref: '#/components/responses/NotFound'


components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: babbel_session
      description: Session-based authentication using secure cookies

  parameters:
    id:
      name: id
      in: path
      required: true
      schema:
        type: integer
      description: Resource ID
    limit:
      name: limit
      in: query
      schema:
        type: integer
        default: 20
        maximum: 100
      description: Maximum number of items to return
    offset:
      name: offset
      in: query
      schema:
        type: integer
        default: 0
      description: Number of items to skip
    sort:
      name: sort
      in: query
      schema:
        type: string
      description: |
        Sort order. Use field:direction format or prefix notation:
        - `name:asc` or `+name` - ascending
        - `name:desc` or `-name` - descending
        - `created_at:desc,name:asc` - multiple fields
      examples:
        single_field:
          value: "name:asc"
          summary: "Sort by name ascending"
        multiple_fields:
          value: "created_at:desc,name:asc"
          summary: "Sort by created date desc, then name asc"
        prefix_notation:
          value: "-created_at,+name"
          summary: "Sort by created date desc, then name asc (prefix notation)"
    fields:
      name: fields
      in: query
      schema:
        type: string
      description: |
        Comma-separated list of fields to include in response.
        Use dot notation for nested fields.
      examples:
        basic:
          value: "id,name,created_at"
          summary: "Return only ID, name, and created date"
        nested:
          value: "id,station.name,voice.name"
          summary: "Include nested relationship fields"
    search:
      name: search
      in: query
      schema:
        type: string
      description: |
        Search term for full-text search across relevant fields.
        Searches in names, titles, text content depending on resource.
      example: "news update"
    status:
      name: status
      in: query
      schema:
        type: string
        enum: [all, active, deleted]
        default: active
      description: |
        Filter by resource status:
        - `active` - only active/non-deleted resources (default)
        - `deleted` - only soft-deleted resources
        - `all` - include both active and deleted resources
    filter:
      name: filter
      in: query
      style: deepObject
      explode: true
      schema:
        type: object
        additionalProperties:
          oneOf:
            - type: string
            - type: object
              properties:
                eq:
                  type: string
                  description: Equals
                ne:
                  type: string
                  description: Not equals
                gt:
                  type: string
                  description: Greater than
                gte:
                  type: string
                  description: Greater than or equal
                lt:
                  type: string
                  description: Less than
                lte:
                  type: string
                  description: Less than or equal
                like:
                  type: string
                  description: Pattern match (SQL LIKE)
                in:
                  type: string
                  description: Comma-separated list of values
                null:
                  type: boolean
                  description: Is null (true) or not null (false)
      description: |
        Advanced filtering using field-based operators.
        
        Basic usage: `filter[field]=value`
        
        Advanced operators: `filter[field][op]=value`
        
        Supported operators:
        - `eq` - equals (default)
        - `ne` - not equals
        - `gt`, `gte`, `lt`, `lte` - comparisons
        - `like` - pattern matching
        - `in` - comma-separated values
        - `null` - is/isn't null
      examples:
        basic:
          value: { "name": "Radio Station" }
          summary: "Filter by exact name match"
        comparison:
          value: { "created_at": { "gte": "2024-01-01T00:00:00Z" } }
          summary: "Filter by date range"
        pattern:
          value: { "name": { "like": "%radio%" } }
          summary: "Filter by name pattern"
        multiple:
          value: { "status": "active", "voice_id": { "null": false } }
          summary: "Multiple filter conditions"

  schemas:
    Station:
      type: object
      properties:
        id:
          type: integer
          format: int32
          description: Station ID
        name:
          type: string
          minLength: 1
          maxLength: 255
          description: Unique station name (must be unique across all stations)
          x-unique: true
        max_stories_per_block:
          type: integer
          minimum: 1
        pause_seconds:
          type: number
          format: float
          minimum: 0
          maximum: 60
          default: 2.0
          description: Pause time in seconds between messages in bulletin
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    StationInput:
      type: object
      required:
        - name
        - max_stories_per_block
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
          description: Unique station name (must be unique across all stations)
          x-unique: true
        max_stories_per_block:
          type: integer
          minimum: 1
          maximum: 50
        pause_seconds:
          type: number
          format: float
          minimum: 0
          maximum: 60
          default: 2.0
          description: Pause time in seconds between messages in bulletin

    Voice:
      type: object
      properties:
        id:
          type: integer
          format: int32
          description: Voice ID
        name:
          type: string
          minLength: 1
          maxLength: 255
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    StationVoice:
      type: object
      description: Represents the relationship between a station and voice with station-specific jingle configuration
      x-unique-constraint: [station_id, voice_id]
      properties:
        id:
          type: integer
          format: int32
          description: StationVoice relationship ID
        station_id:
          type: integer
          format: int32
          description: Station ID
          x-foreign-key: stations.id
        voice_id:
          type: integer
          format: int32
          description: Voice ID
          x-foreign-key: voices.id
        audio_url:
          type: string
          nullable: true
          description: API URL to download the audio file
        mix_point:
          type: number
          format: float
          minimum: 0
          description: Time in seconds when voice should start over the jingle
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        station_name:
          type: string
          description: Name of the station (populated by joins)
        voice_name:
          type: string
          description: Name of the voice (populated by joins)

    Story:
      type: object
      properties:
        id:
          type: integer
          format: int32
          description: Story ID
        title:
          type: string
          minLength: 1
          maxLength: 500
        text:
          type: string
          minLength: 1
        voice_id:
          type: integer
          format: int32
          nullable: true
          description: Voice ID if assigned, null if no voice is assigned
          x-foreign-key: voices.id
        voice_name:
          type: string
          description: Name of the assigned voice (from JOIN query)
        audio_url:
          type: string
          nullable: true
          description: API URL to download the audio file
        duration_seconds:
          type: number
          format: float
          nullable: true
        status:
          type: string
          enum: [draft, active, expired]
        start_date:
          type: string
          format: date-time
          description: Start date and time in RFC3339 format
        end_date:
          type: string
          format: date-time
          description: End date and time in RFC3339 format
        monday:
          type: boolean
          description: Schedule for Monday
        tuesday:
          type: boolean
          description: Schedule for Tuesday
        wednesday:
          type: boolean
          description: Schedule for Wednesday
        thursday:
          type: boolean
          description: Schedule for Thursday
        friday:
          type: boolean
          description: Schedule for Friday
        saturday:
          type: boolean
          description: Schedule for Saturday
        sunday:
          type: boolean
          description: Schedule for Sunday
        weekdays:
          type: object
          description: |
            Computed weekdays object containing boolean values for each day.
            This is a computed field that combines the individual weekday boolean fields above.
          properties:
            monday:
              type: boolean
              description: Schedule for Monday
            tuesday:
              type: boolean
              description: Schedule for Tuesday
            wednesday:
              type: boolean
              description: Schedule for Wednesday
            thursday:
              type: boolean
              description: Schedule for Thursday
            friday:
              type: boolean
              description: Schedule for Friday
            saturday:
              type: boolean
              description: Schedule for Saturday
            sunday:
              type: boolean
              description: Schedule for Sunday
        metadata:
          type: object
          additionalProperties: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        deleted_at:
          type: string
          format: date-time
          nullable: true
          description: Timestamp when the story was soft-deleted

    StoryInput:
      type: object
      required:
        - title
        - text
        - start_date
        - end_date
      description: |
        Story input for multipart/form-data submissions.
        
        **Important Form Validation Notes**:
        - Required fields are validated manually (not through binding tags)
        - Empty strings are treated as missing for required fields
        - title and text must be non-empty strings
        - voice_id is optional - stories without voice won't be in bulletins
        - weekdays must be a valid JSON string when provided
        - metadata can be empty string (stored as NULL) or valid JSON
        - Validation differs from JSON endpoints which use struct binding
        
        **Form Field Examples**:
        ```
        title: "Breaking News Update"
        text: "This is the news content for the story."
        voice_id: "1"
        status: "active"
        start_date: "2024-01-20T00:00:00Z"
        end_date: "2024-01-27T23:59:59Z"
        monday: "true"
        tuesday: "true"
        wednesday: "false"
        metadata: "{\"priority\": \"high\", \"category\": \"news\"}"
        audio: <binary file>
        ```
        
        **Important**: Boolean values must be sent as strings ("true"/"false") in form data.
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 500
        text:
          type: string
          minLength: 1
        voice_id:
          type: integer
          nullable: true
          description: Optional voice ID. Stories without a voice will not be included in bulletin generation
        audio:
          type: string
          format: binary
          description: Audio file (optional)
        status:
          type: string
          enum: [draft, active, expired]
          default: draft
        start_date:
          type: string
          format: date-time
          description: Start date and time in RFC3339 format
        end_date:
          type: string
          format: date-time
          description: End date and time in RFC3339 format
        monday:
          type: boolean
          description: Schedule for Monday
        tuesday:
          type: boolean
          description: Schedule for Tuesday  
        wednesday:
          type: boolean
          description: Schedule for Wednesday
        thursday:
          type: boolean
          description: Schedule for Thursday
        friday:
          type: boolean
          description: Schedule for Friday
        saturday:
          type: boolean
          description: Schedule for Saturday
        sunday:
          type: boolean
          description: Schedule for Sunday
        metadata:
          type: string
          description: |
            Optional JSON metadata. Pass empty string to set to NULL.
            When submitted via multipart/form-data, this must be a JSON-encoded string or empty string.

    User:
      type: object
      properties:
        id:
          type: integer
          format: int32
          description: User ID
        username:
          type: string
        full_name:
          type: string
          nullable: true
        email:
          type: string
          format: email
          maxLength: 255
          nullable: true
        role:
          type: string
          enum: [admin, editor, viewer]
          description: |
            User roles:
            - admin: Full access to all resources
            - editor: Can manage content (stations, voices, stories)
            - viewer: Read-only access
        suspended_at:
          type: string
          format: date-time
          nullable: true
          description: Timestamp when the user was suspended
        last_login_at:
          type: string
          format: date-time
          nullable: true
        login_count:
          type: integer
        failed_login_attempts:
          type: integer
          description: Number of consecutive failed login attempts
        locked_until:
          type: string
          format: date-time
          nullable: true
          description: Timestamp until when the account is locked due to failed login attempts
        password_changed_at:
          type: string
          format: date-time
          nullable: true
        metadata:
          type: string
          description: JSON metadata for user-specific settings
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    UserInput:
      type: object
      required:
        - username
        - full_name
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 100
          pattern: '^[a-zA-Z0-9_-]+$'
          description: Unique username (alphanumeric, underscore, hyphen only)
          x-unique: true
        full_name:
          type: string
          minLength: 1
          maxLength: 255
        password:
          type: string
          writeOnly: true
          minLength: 8
          description: Required when creating a new user, optional when updating
        email:
          type: string
          format: email
          maxLength: 255
          nullable: true
        role:
          type: string
          enum: [admin, editor, viewer]
          default: viewer
          description: |
            User roles and permissions:
            - admin: Full access to all resources including user management
            - editor: Can manage content (stations, voices, stories, bulletins)
            - viewer: Read-only access to content
        metadata:
          type: string
          description: JSON metadata for user-specific settings (optional)
        suspended:
          type: boolean
          description: Set to true to suspend user, false to restore (optional, only for PUT /users/{id})

    BulletinResponse:
      type: object
      description: Bulletin with additional API response fields
      properties:
        id:
          type: integer
          format: int32
          description: Bulletin ID
        station_id:
          type: integer
          format: int32
          description: Station ID
          x-foreign-key: stations.id
        station_name:
          type: string
          description: Name of the station
        audio_url:
          type: string
          description: URL to download the audio file
        filename:
          type: string
          description: Filename of the bulletin audio file
        created_at:
          type: string
          format: date-time
        duration:
          type: number
          format: float
          description: Duration of the bulletin in seconds
        file_size:
          type: integer
          format: int64
          description: Size of the audio file in bytes
        story_count:
          type: integer
          description: Number of stories included in the bulletin

    Error:
      type: object
      properties:
        error:
          type: string
        message:
          type: string
        details:
          type: object
          additionalProperties: true

    ProblemDetails:
      type: object
      description: RFC 9457 Problem Details for HTTP APIs
      required:
        - type
        - title
        - status
      properties:
        type:
          type: string
          format: uri
          description: URI that identifies the problem type
          example: "https://api.example.com/problems/validation-error"
        title:
          type: string
          description: Short, human-readable summary of the problem
          example: "Validation Error"
        status:
          type: integer
          description: HTTP status code
          example: 422
        detail:
          type: string
          description: Human-readable explanation specific to this occurrence
          example: "The request body contains invalid data"
        instance:
          type: string
          format: uri
          description: URI that identifies the specific occurrence of the problem
          example: "/api/v1/stories/123"
        errors:
          type: array
          description: Array of validation errors (for 422 responses)
          items:
            type: object
            properties:
              field:
                type: string
                description: Field name that failed validation
                example: "title"
              code:
                type: string
                description: Error code
                example: "required"
              message:
                type: string
                description: Human-readable error message
                example: "Title is required"

    ValidationError:
      allOf:
        - $ref: '#/components/schemas/ProblemDetails'
        - type: object
          properties:
            type:
              example: "https://api.example.com/problems/validation-error"
            title:
              example: "Validation Error"
            status:
              example: 422

    ConflictError:
      allOf:
        - $ref: '#/components/schemas/ProblemDetails'
        - type: object
          properties:
            type:
              example: "https://api.example.com/problems/resource-conflict"
            title:
              example: "Resource Conflict"
            status:
              example: 409

    # Paginated Response Schemas for Modern CRUD Endpoints
    StationsListResponse:
      type: object
      description: Paginated response for stations list endpoint
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Station'
        total:
          type: integer
          description: Total number of stations matching the query
        limit:
          type: integer
          description: Maximum number of items per page
        offset:
          type: integer
          description: Number of items skipped for pagination

    VoicesListResponse:
      type: object
      description: Paginated response for voices list endpoint
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Voice'
        total:
          type: integer
          description: Total number of voices matching the query
        limit:
          type: integer
          description: Maximum number of items per page
        offset:
          type: integer
          description: Number of items skipped for pagination

    StationVoicesListResponse:
      type: object
      description: Paginated response for station-voices list endpoint
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/StationVoice'
        total:
          type: integer
          description: Total number of station-voice relationships matching the query
        limit:
          type: integer
          description: Maximum number of items per page
        offset:
          type: integer
          description: Number of items skipped for pagination

    BulletinsListResponse:
      type: object
      description: Paginated response for bulletins list endpoints
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/BulletinResponse'
        total:
          type: integer
          description: Total number of bulletins matching the query
        limit:
          type: integer
          description: Maximum number of items per page
        offset:
          type: integer
          description: Number of items skipped for pagination

    BulletinStoriesListResponse:
      type: object
      description: Paginated response for bulletin stories list endpoint
      properties:
        data:
          type: array
          items:
            type: object
            description: Bulletin-story relationship with nested objects
            properties:
              id:
                type: integer
                description: Bulletin-story relationship ID
              bulletin_id:
                type: integer
                description: Bulletin ID
              story_id:
                type: integer
                description: Story ID
              story_order:
                type: integer
                description: Order of story in bulletin
              created_at:
                type: string
                format: date-time
                description: When story was added to bulletin
              station:
                type: object
                properties:
                  id:
                    type: integer
                    description: Station ID
                  name:
                    type: string
                    description: Station name
              story:
                type: object
                properties:
                  id:
                    type: integer
                    description: Story ID
                  title:
                    type: string
                    description: Story title
              bulletin:
                type: object
                properties:
                  id:
                    type: integer
                    description: Bulletin ID
                  filename:
                    type: string
                    description: Bulletin filename
        total:
          type: integer
          description: Total number of story-bulletin relationships matching the query
        limit:
          type: integer
          description: Maximum number of items per page
        offset:
          type: integer
          description: Number of items skipped for pagination

    StoryBulletinsListResponse:
      type: object
      description: Paginated response for story bulletins history endpoint
      properties:
        data:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/BulletinResponse'
              - type: object
                properties:
                  story_order:
                    type: integer
                    description: Order of story in this bulletin
                  included_at:
                    type: string
                    format: date-time
                    description: When story was included in this bulletin
        total:
          type: integer
          description: Total number of bulletins that included this story
        limit:
          type: integer
          description: Maximum number of items per page
        offset:
          type: integer
          description: Number of items skipped for pagination

  responses:
    BadRequest:
      description: Bad request
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Unauthorized
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Forbidden:
      description: Insufficient permissions
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: Resource not found
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Conflict:
      description: Resource conflict (duplicate, constraint violation)
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ConflictError'
          examples:
            duplicate_name:
              summary: Duplicate station name
              value:
                type: "https://api.example.com/problems/resource-conflict"
                title: "Resource Conflict"
                status: 409
                detail: "A station with this name already exists"
                instance: "/api/v1/stations"
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            legacy_conflict_error:
              summary: Legacy conflict error format
              value:
                error: "duplicate_resource"
                message: "Station name already exists"
                details:
                  field: "name"
                  value: "Radio Station 1"
    UnprocessableEntity:
      description: Validation error
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ValidationError'
          examples:
            validation_errors:
              summary: Field validation errors
              value:
                type: "https://api.example.com/problems/validation-error"
                title: "Validation Error"
                status: 422
                detail: "The request contains validation errors"
                instance: "/api/v1/stations"
                errors:
                  - field: "name"
                    code: "required"
                    message: "Name is required"
                  - field: "max_stories_per_block"
                    code: "range"
                    message: "Must be between 1 and 50"
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            legacy_validation_error:
              summary: Legacy validation error format
              value:
                error: "validation_error"
                message: "Validation failed"
                details:
                  name: "Name is required"
                  max_stories_per_block: "Must be between 1 and 50"
    InternalServerError:
      description: Internal server error
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
